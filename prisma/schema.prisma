generator client {
  provider                    = "prisma-client-py"
  interface                   = "asyncio"
  enable_experimental_decimal = "true"
  recursive_type_depth        = "5"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  id            BigInt      @id @default(autoincrement())
  address_label String      @db.VarChar
  city          String      @db.VarChar
  state         String      @db.VarChar
  zip_code      String      @db.VarChar
  country       String      @db.VarChar
  customers     customers[]
  shipping      shipping[]
}

model categories {
  slug               String               @id @db.VarChar
  name               String               @db.VarChar
  description        String               @db.VarChar
  product_categories product_categories[]
}

model customers {
  id                 String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name         String     @db.VarChar
  last_name          String     @db.VarChar
  email              String     @unique @db.VarChar
  password           String     @db.VarChar
  phone              String     @db.VarChar
  default_address_id BigInt?
  created_at         DateTime?  @default(now()) @db.Timestamp(6)
  addresses          addresses? @relation(fields: [default_address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customers_default_address")
  orders             orders[]
}

model mediafiles {
  id                  BigInt                @id @default(autoincrement())
  url                 String                @db.VarChar
  type                String                @db.VarChar
  products_mediafiles products_mediafiles[]
}

model order_items {
  id         BigInt   @id @default(autoincrement())
  order_id   BigInt
  product_id BigInt
  quantity   Int
  orders     orders   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id          BigInt        @id @default(autoincrement())
  customer_id String        @db.Uuid
  shipping_id String        @db.Uuid
  payment_id  String        @db.Uuid
  ordered_at  DateTime?     @default(now()) @db.Timestamp(6)
  order_items order_items[]
  customers   customers     @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments    payments      @relation(fields: [payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shipping    shipping      @relation(fields: [shipping_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model payments {
  id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount  BigInt
  method  String    @db.VarChar
  status  String    @db.VarChar
  paid_at DateTime? @db.Timestamp(6)
  orders  orders[]
}

model product_categories {
  product_id  BigInt
  category_id String     @db.VarChar
  categories  categories @relation(fields: [category_id], references: [slug], onDelete: NoAction, onUpdate: NoAction)
  products    products   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, category_id])
}

model products {
  id                  BigInt                @id @default(autoincrement())
  name                String                @db.VarChar
  description         String                @db.VarChar
  price               BigInt
  stock               Int
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  hidden              Boolean               @default(false)
  order_items         order_items[]
  product_categories  product_categories[]
  products_mediafiles products_mediafiles[]
}

model products_mediafiles {
  id            BigInt     @id @default(autoincrement())
  product_id    BigInt
  media_file_id BigInt
  mediafiles    mediafiles @relation(fields: [media_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products      products   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model shipping {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  address_id         BigInt
  status             String    @db.VarChar
  estimated_delivery Int
  delivered_at       DateTime? @db.Timestamp(6)
  shipped_at         DateTime? @db.Timestamp(6)
  orders             orders[]
  addresses          addresses @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
